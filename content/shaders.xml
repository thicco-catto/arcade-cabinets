<shaders>
	<shader name="MinigameShader">
		<parameters>
			<param name="Time" type="float"/>
            <param name="Amount" type="float"/>
			<param name="Enabled" type="float"/>
		</parameters>
		<vertex><![CDATA[
                attribute vec3 Position;
                attribute vec2 TexCoord;
                attribute float Time;
                attribute float Amount;
                attribute vec4 RenderData;
				attribute float Enabled;
				attribute vec4 Color;
				varying vec4 Color0;
				varying float EnabledOut;
                varying vec2 TexCoord0;
                varying float TimeOut;
                varying float AmountOut;
                varying vec4 OutRenderData;
                uniform mat4 Transform;

                void main(void)
                {
	                TimeOut = Time;
	                AmountOut = Amount;
	                OutRenderData = RenderData;
	                gl_Position = Transform * vec4(Position.xyz, 1.0);
	                TexCoord0 = TexCoord;
					EnabledOut = Enabled;
					Color0 = Color;
                }

		]]></vertex>
		<fragment><![CDATA[
				varying float EnabledOut;
			    varying vec2 TexCoord0;
                varying float TimeOut;
                varying float AmountOut;
                varying vec4 OutRenderData;
				varying vec4 Color0;
                uniform sampler2D Texture0;

                void main(void)
                {
					if(EnabledOut == 1){
		                vec2 screenRatio = OutRenderData.zw / OutRenderData.xy;
		                vec2 screenUV = TexCoord0 * screenRatio;

	            	    /*Distortion*/
	        	        screenUV -= vec2(.5,.5);
	    	            screenUV.x *= 1.0 + pow((abs(screenUV.y) / 5.0), 2.0);
		                screenUV.y *= 1.0 + pow((abs(screenUV.x) / 1.5), 2.0);
		                screenUV += vec2(.5,.5);

	    	            /*Vigneting*/
		                vec2 vigUV = (screenUV - 0.5) * vec2(1.5, 1.0) * 2.0;
		                float vignete = 1.0 - pow(clamp(length(vigUV) * 0.65, 0.0, 1.0), 5.0) * 0.9;

	                	vec2 finalUV = screenUV / screenRatio;
	                	vec4 color = texture2D(Texture0, finalUV);
	                	float scanline = abs(sin(finalUV.y * 700.0 - TimeOut)) * 0.2;
	                	float highlight = (1.0 - clamp(length(finalUV) * 3.5, 0.0, 1.0)) * (1.0 - clamp(length((finalUV - vec2(0.15, 0.15)) * 8.0), 0.0, 1.0));
	                	gl_FragColor = (color + vec4(vec3(scanline + highlight), 1.0)) * vignete;
					}else{
						gl_FragColor = Color0 * texture2D(Texture0, TexCoord0);
					}
                }
		]]></fragment>
	</shader>
</shaders>