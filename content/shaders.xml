<shaders>
	<shader name="MinigameShader">
		<parameters>
			<param name="Time" type="float"/>
            <param name="Amount" type="float"/>
			<param name="Enabled" type="float"/>
		</parameters>
		<vertex><![CDATA[
                attribute vec3 Position;
                attribute vec2 TexCoord;
                attribute float Time;
                attribute float Amount;
                attribute vec4 RenderData;
				attribute float Enabled;
				attribute vec4 Color;
				varying vec4 Color0;
				varying float EnabledOut;
                varying vec2 TexCoord0;
                varying float TimeOut;
                varying float AmountOut;
                varying vec4 OutRenderData;
                uniform mat4 Transform;

                void main(void)
                {
	                TimeOut = Time;
	                AmountOut = Amount;
	                OutRenderData = RenderData;
	                gl_Position = Transform * vec4(Position.xyz, 1.0);
	                TexCoord0 = TexCoord;
					EnabledOut = Enabled;
					Color0 = Color;
                }

		]]></vertex>
		<fragment><![CDATA[
				varying float EnabledOut;
			    varying vec2 TexCoord0;
                varying float TimeOut;
                varying float AmountOut;
                varying vec4 OutRenderData;
				varying vec4 Color0;
                uniform sampler2D Texture0;

                void main(void)
                {
					if(EnabledOut == 1){
		                vec2 screenRatio = OutRenderData.zw / OutRenderData.xy;
		                vec2 screenUV = TexCoord0 * screenRatio;

	            	    /*Distortion*/
	        	        screenUV -= vec2(.5,.5);
	    	            screenUV.x *= 1.0 + pow((abs(screenUV.y) / 5.0), 2.0);
		                screenUV.y *= 1.0 + pow((abs(screenUV.x) / 1.5), 2.0);
		                screenUV += vec2(.5,.5);

	    	            /*Vigneting*/
		                vec2 vigUV = (screenUV - 0.5) * vec2(1.5, 1.0) * 2.0;
		                float vignete = 1.0 - pow(clamp(length(vigUV) * 0.65, 0.0, 1.0), 5.0) * 0.9;

	                	vec2 finalUV = screenUV / screenRatio;
	                	vec4 color = texture2D(Texture0, finalUV);
	                	float scanline = abs(sin(finalUV.y * 700.0 - TimeOut)) * 0.2;
	                	float highlight = (1.0 - clamp(length(finalUV) * 3.5, 0.0, 1.0)) * (1.0 - clamp(length((finalUV - vec2(0.15, 0.15)) * 8.0), 0.0, 1.0));
	                	gl_FragColor = (color + vec4(vec3(scanline + highlight), 1.0)) * vignete;
					}else{
						gl_FragColor = Color0 * texture2D(Texture0, TexCoord0);
					}
                }
		]]></fragment>
	</shader>

	<shader name="MinigameShaderV2">
        <parameters>
			<param name="Time" type="float"/>
			<param name="Enabled" type="float"/>
        </parameters>
		<vertex><![CDATA[
			attribute vec3 Position;										
			attribute vec4 Color;											
			attribute vec2 TexCoord;										
			attribute vec2 ScreenSize;										
			attribute vec2 TextureSize;			
            attribute vec4 RenderData;
            varying vec4 RenderDataOut; 
			attribute float Scale;
			attribute float Time;			
			attribute float Enabled;
			varying vec4 Color0;											
			varying vec2 TexCoord0;										
			varying float ScaleOut;
			varying float TimeOut;
			varying float EnabledOut;
			uniform mat4 Transform;										

			void main(void)												
			{
				RenderDataOut = RenderData;
				ScaleOut = Scale;			
				TimeOut = Time;
				EnabledOut = Enabled;	
				Color0 = Color;												
				TexCoord0 = TexCoord;
				gl_Position = Transform * vec4(Position.xyz, 1.0);			
			}
		]]></vertex>
		<fragment><![CDATA[
			varying lowp vec4 Color0;										
			varying mediump vec2 TexCoord0;								
			varying lowp float ScaleOut;
            varying lowp vec4 RenderDataOut;
			varying mediump float TimeOut;
			varying lowp float EnabledOut;
			uniform sampler2D Texture0;											

			vec4 sample_screen2(vec2 coords){	
				vec4 outcolor = texture2D(Texture0, coords.xy);
				
				if(coords.x<0.0||coords.y<0.0||coords.x>1.0||coords.y>1.0) outcolor = vec4(0,0,0,1);
				
				outcolor *= min(1.0, max(.3,(sin(coords.y*400.0 - TimeOut * 20.0)) + 1.8));
				
				outcolor.r *= min(1.0, max(.8,(sin(coords.x*1000.0 )) + .2));
				outcolor.g *= min(1.0, max(.8,(sin(coords.x*1000.0+ 2.094)) + .2));
				outcolor.b *= min(1.0, max(.8,(sin(coords.x*1000.0+ 4.189)) + .2));
				outcolor *= 1.2;
					
				return outcolor;
			}
						
			void main(void)												
			{			
				if(EnabledOut == 1.0){	
							            vec2 screenRatio = RenderDataOut.zw / RenderDataOut.xy;
		            vec2 newCoords = TexCoord0 * screenRatio;

					//if(newCoords.y < 0.5){
						newCoords -= vec2(.5,.5);
	    	        	newCoords.x *= 1.0 + pow(abs(newCoords.y) / 2, 2.0);
		            	newCoords.y *= 1.0 + pow(abs(newCoords.x) / 1.2, 2.0);
		            	newCoords += vec2(.5,.5);
					//}

					newCoords /= screenRatio;

					vec4 outcolor = sample_screen2(newCoords.xy) * 3.0
						+ sample_screen2(newCoords.xy + vec2( 1.0,0.0)/1200.0)*2.0 
						+ sample_screen2(newCoords.xy + vec2(-1.0,0.0)/1200.0)*2.0
						+ sample_screen2(newCoords.xy + vec2( 2.0,0.0)/1200.0)*1.0
						+ sample_screen2(newCoords.xy + vec2(-2.0,0.0)/1200.0)*1.0
					;

					outcolor /= 7.0;
					
					outcolor *= min(1.2, 1.0-pow(length(newCoords.xy - .5)*1.2, 2.0));

					outcolor.a = 1.0;
					gl_FragColor = outcolor;
				}else if(EnabledOut==2.0){
					vec4 screencoords = gl_FragCoord;
					
					screencoords.x /= RenderDataOut.y;
					screencoords.y /= RenderDataOut.x;

					screencoords.xy = (screencoords.xy - .5) * 2.0;
					screencoords.x *= 1.0+pow(abs(screencoords.y)/3.5, 2.0);
					screencoords.y *= 1.0+pow(abs(screencoords.x)/3.5, 2.0);

					screencoords.xy = (screencoords.xy * .5) + .5;
					
					vec4 outcolor = sample_screen2(screencoords.xy) * 3.0
						+ sample_screen2(screencoords.xy + vec2( 1.0,0.0)/1200.0)*2.0 
						+ sample_screen2(screencoords.xy + vec2(-1.0,0.0)/1200.0)*2.0
						+ sample_screen2(screencoords.xy + vec2( 2.0,0.0)/1200.0)*1.0
						+ sample_screen2(screencoords.xy + vec2(-2.0,0.0)/1200.0)*1.0
					;
					outcolor /= 7.0;
					
					outcolor *= min(1.2, 1.0-pow(length(screencoords.xy - .5)*1.2, 2.0));

					outcolor.a = 1.0;
					gl_FragColor = outcolor;
				}else{
					gl_FragColor = Color0 * texture2D(Texture0, TexCoord0);
				}
			}
		]]></fragment>
	</shader>
</shaders>